// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v6.31.1
// source: zeloscloud/trace/trace.proto

package trace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DataType int32

const (
	DataType_DATA_TYPE_UNSPECIFIED  DataType = 0
	DataType_DATA_TYPE_INT8         DataType = 1
	DataType_DATA_TYPE_INT16        DataType = 2
	DataType_DATA_TYPE_INT32        DataType = 3
	DataType_DATA_TYPE_INT64        DataType = 4
	DataType_DATA_TYPE_UINT8        DataType = 5
	DataType_DATA_TYPE_UINT16       DataType = 6
	DataType_DATA_TYPE_UINT32       DataType = 7
	DataType_DATA_TYPE_UINT64       DataType = 8
	DataType_DATA_TYPE_FLOAT32      DataType = 9
	DataType_DATA_TYPE_FLOAT64      DataType = 10
	DataType_DATA_TYPE_TIMESTAMP_NS DataType = 11
	DataType_DATA_TYPE_BINARY       DataType = 12
	DataType_DATA_TYPE_STRING       DataType = 13
	DataType_DATA_TYPE_BOOL         DataType = 14
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		0:  "DATA_TYPE_UNSPECIFIED",
		1:  "DATA_TYPE_INT8",
		2:  "DATA_TYPE_INT16",
		3:  "DATA_TYPE_INT32",
		4:  "DATA_TYPE_INT64",
		5:  "DATA_TYPE_UINT8",
		6:  "DATA_TYPE_UINT16",
		7:  "DATA_TYPE_UINT32",
		8:  "DATA_TYPE_UINT64",
		9:  "DATA_TYPE_FLOAT32",
		10: "DATA_TYPE_FLOAT64",
		11: "DATA_TYPE_TIMESTAMP_NS",
		12: "DATA_TYPE_BINARY",
		13: "DATA_TYPE_STRING",
		14: "DATA_TYPE_BOOL",
	}
	DataType_value = map[string]int32{
		"DATA_TYPE_UNSPECIFIED":  0,
		"DATA_TYPE_INT8":         1,
		"DATA_TYPE_INT16":        2,
		"DATA_TYPE_INT32":        3,
		"DATA_TYPE_INT64":        4,
		"DATA_TYPE_UINT8":        5,
		"DATA_TYPE_UINT16":       6,
		"DATA_TYPE_UINT32":       7,
		"DATA_TYPE_UINT64":       8,
		"DATA_TYPE_FLOAT32":      9,
		"DATA_TYPE_FLOAT64":      10,
		"DATA_TYPE_TIMESTAMP_NS": 11,
		"DATA_TYPE_BINARY":       12,
		"DATA_TYPE_STRING":       13,
		"DATA_TYPE_BOOL":         14,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_zeloscloud_trace_trace_proto_enumTypes[0].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_zeloscloud_trace_trace_proto_enumTypes[0]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{0}
}

type Value struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*Value_Int8
	//	*Value_Int16
	//	*Value_Int32
	//	*Value_Int64
	//	*Value_Uint8
	//	*Value_Uint16
	//	*Value_Uint32
	//	*Value_Uint64
	//	*Value_Float32
	//	*Value_Float64
	//	*Value_TimestampNs
	//	*Value_Binary
	//	*Value_String_
	//	*Value_Bool
	Value         isValue_Value `protobuf_oneof:"value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Value) Reset() {
	*x = Value{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{0}
}

func (x *Value) GetValue() isValue_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Value) GetInt8() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int8); ok {
			return x.Int8
		}
	}
	return 0
}

func (x *Value) GetInt16() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int16); ok {
			return x.Int16
		}
	}
	return 0
}

func (x *Value) GetInt32() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int32); ok {
			return x.Int32
		}
	}
	return 0
}

func (x *Value) GetInt64() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Int64); ok {
			return x.Int64
		}
	}
	return 0
}

func (x *Value) GetUint8() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint8); ok {
			return x.Uint8
		}
	}
	return 0
}

func (x *Value) GetUint16() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint16); ok {
			return x.Uint16
		}
	}
	return 0
}

func (x *Value) GetUint32() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint32); ok {
			return x.Uint32
		}
	}
	return 0
}

func (x *Value) GetUint64() uint64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Uint64); ok {
			return x.Uint64
		}
	}
	return 0
}

func (x *Value) GetFloat32() float32 {
	if x != nil {
		if x, ok := x.Value.(*Value_Float32); ok {
			return x.Float32
		}
	}
	return 0
}

func (x *Value) GetFloat64() float64 {
	if x != nil {
		if x, ok := x.Value.(*Value_Float64); ok {
			return x.Float64
		}
	}
	return 0
}

func (x *Value) GetTimestampNs() int64 {
	if x != nil {
		if x, ok := x.Value.(*Value_TimestampNs); ok {
			return x.TimestampNs
		}
	}
	return 0
}

func (x *Value) GetBinary() []byte {
	if x != nil {
		if x, ok := x.Value.(*Value_Binary); ok {
			return x.Binary
		}
	}
	return nil
}

func (x *Value) GetString_() string {
	if x != nil {
		if x, ok := x.Value.(*Value_String_); ok {
			return x.String_
		}
	}
	return ""
}

func (x *Value) GetBool() bool {
	if x != nil {
		if x, ok := x.Value.(*Value_Bool); ok {
			return x.Bool
		}
	}
	return false
}

type isValue_Value interface {
	isValue_Value()
}

type Value_Int8 struct {
	// All int / uint types are varint encoded in protobuf. Even though we represent these the same,
	// we use the tag to discriminate the underlying data type of the field.
	Int8 int64 `protobuf:"varint,1,opt,name=int8,proto3,oneof"`
}

type Value_Int16 struct {
	Int16 int64 `protobuf:"varint,2,opt,name=int16,proto3,oneof"`
}

type Value_Int32 struct {
	Int32 int64 `protobuf:"varint,3,opt,name=int32,proto3,oneof"`
}

type Value_Int64 struct {
	Int64 int64 `protobuf:"varint,4,opt,name=int64,proto3,oneof"`
}

type Value_Uint8 struct {
	Uint8 uint64 `protobuf:"varint,5,opt,name=uint8,proto3,oneof"`
}

type Value_Uint16 struct {
	Uint16 uint64 `protobuf:"varint,6,opt,name=uint16,proto3,oneof"`
}

type Value_Uint32 struct {
	Uint32 uint64 `protobuf:"varint,7,opt,name=uint32,proto3,oneof"`
}

type Value_Uint64 struct {
	Uint64 uint64 `protobuf:"varint,8,opt,name=uint64,proto3,oneof"`
}

type Value_Float32 struct {
	Float32 float32 `protobuf:"fixed32,9,opt,name=float32,proto3,oneof"`
}

type Value_Float64 struct {
	Float64 float64 `protobuf:"fixed64,10,opt,name=float64,proto3,oneof"`
}

type Value_TimestampNs struct {
	// The current timestamp in nanoseconds is greater than 2^56, so it's more efficient to store
	// this as a sfixed64 than a varint int64
	TimestampNs int64 `protobuf:"fixed64,11,opt,name=timestamp_ns,json=timestampNs,proto3,oneof"`
}

type Value_Binary struct {
	Binary []byte `protobuf:"bytes,12,opt,name=binary,proto3,oneof"`
}

type Value_String_ struct {
	String_ string `protobuf:"bytes,13,opt,name=string,proto3,oneof"`
}

type Value_Bool struct {
	Bool bool `protobuf:"varint,14,opt,name=bool,proto3,oneof"`
}

func (*Value_Int8) isValue_Value() {}

func (*Value_Int16) isValue_Value() {}

func (*Value_Int32) isValue_Value() {}

func (*Value_Int64) isValue_Value() {}

func (*Value_Uint8) isValue_Value() {}

func (*Value_Uint16) isValue_Value() {}

func (*Value_Uint32) isValue_Value() {}

func (*Value_Uint64) isValue_Value() {}

func (*Value_Float32) isValue_Value() {}

func (*Value_Float64) isValue_Value() {}

func (*Value_TimestampNs) isValue_Value() {}

func (*Value_Binary) isValue_Value() {}

func (*Value_String_) isValue_Value() {}

func (*Value_Bool) isValue_Value() {}

type TraceEventFieldMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType      DataType               `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3,enum=zeloscloud.trace.DataType" json:"data_type,omitempty"`
	Unit          *string                `protobuf:"bytes,3,opt,name=unit,proto3,oneof" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEventFieldMetadata) Reset() {
	*x = TraceEventFieldMetadata{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEventFieldMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventFieldMetadata) ProtoMessage() {}

func (x *TraceEventFieldMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventFieldMetadata.ProtoReflect.Descriptor instead.
func (*TraceEventFieldMetadata) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{1}
}

func (x *TraceEventFieldMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEventFieldMetadata) GetDataType() DataType {
	if x != nil {
		return x.DataType
	}
	return DataType_DATA_TYPE_UNSPECIFIED
}

func (x *TraceEventFieldMetadata) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

type TraceSegmentStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeNs        int64                  `protobuf:"fixed64,1,opt,name=time_ns,json=timeNs,proto3" json:"time_ns,omitempty"`
	SourceName    string                 `protobuf:"bytes,2,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceSegmentStart) Reset() {
	*x = TraceSegmentStart{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceSegmentStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSegmentStart) ProtoMessage() {}

func (x *TraceSegmentStart) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSegmentStart.ProtoReflect.Descriptor instead.
func (*TraceSegmentStart) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{2}
}

func (x *TraceSegmentStart) GetTimeNs() int64 {
	if x != nil {
		return x.TimeNs
	}
	return 0
}

func (x *TraceSegmentStart) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

type TraceSegmentEnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TimeNs        int64                  `protobuf:"fixed64,1,opt,name=time_ns,json=timeNs,proto3" json:"time_ns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceSegmentEnd) Reset() {
	*x = TraceSegmentEnd{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceSegmentEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSegmentEnd) ProtoMessage() {}

func (x *TraceSegmentEnd) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSegmentEnd.ProtoReflect.Descriptor instead.
func (*TraceSegmentEnd) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{3}
}

func (x *TraceSegmentEnd) GetTimeNs() int64 {
	if x != nil {
		return x.TimeNs
	}
	return 0
}

type TraceEventSchema struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Name          string                     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields        []*TraceEventFieldMetadata `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEventSchema) Reset() {
	*x = TraceEventSchema{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEventSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventSchema) ProtoMessage() {}

func (x *TraceEventSchema) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventSchema.ProtoReflect.Descriptor instead.
func (*TraceEventSchema) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{4}
}

func (x *TraceEventSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEventSchema) GetFields() []*TraceEventFieldMetadata {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TraceEventFieldNamedValuesEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         *Value                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEventFieldNamedValuesEntry) Reset() {
	*x = TraceEventFieldNamedValuesEntry{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEventFieldNamedValuesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventFieldNamedValuesEntry) ProtoMessage() {}

func (x *TraceEventFieldNamedValuesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventFieldNamedValuesEntry.ProtoReflect.Descriptor instead.
func (*TraceEventFieldNamedValuesEntry) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{5}
}

func (x *TraceEventFieldNamedValuesEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEventFieldNamedValuesEntry) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type TraceEventFieldNamedValues struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	EventName     string                             `protobuf:"bytes,1,opt,name=event_name,json=eventName,proto3" json:"event_name,omitempty"`
	FieldName     string                             `protobuf:"bytes,2,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Values        []*TraceEventFieldNamedValuesEntry `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEventFieldNamedValues) Reset() {
	*x = TraceEventFieldNamedValues{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEventFieldNamedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventFieldNamedValues) ProtoMessage() {}

func (x *TraceEventFieldNamedValues) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventFieldNamedValues.ProtoReflect.Descriptor instead.
func (*TraceEventFieldNamedValues) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{6}
}

func (x *TraceEventFieldNamedValues) GetEventName() string {
	if x != nil {
		return x.EventName
	}
	return ""
}

func (x *TraceEventFieldNamedValues) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *TraceEventFieldNamedValues) GetValues() []*TraceEventFieldNamedValuesEntry {
	if x != nil {
		return x.Values
	}
	return nil
}

type TraceEventFieldEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         *Value                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEventFieldEntry) Reset() {
	*x = TraceEventFieldEntry{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEventFieldEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEventFieldEntry) ProtoMessage() {}

func (x *TraceEventFieldEntry) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEventFieldEntry.ProtoReflect.Descriptor instead.
func (*TraceEventFieldEntry) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{7}
}

func (x *TraceEventFieldEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEventFieldEntry) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

type TraceEvent struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	TimeNs        int64                   `protobuf:"fixed64,1,opt,name=time_ns,json=timeNs,proto3" json:"time_ns,omitempty"`
	Name          string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Fields        []*TraceEventFieldEntry `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceEvent) Reset() {
	*x = TraceEvent{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceEvent) ProtoMessage() {}

func (x *TraceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceEvent.ProtoReflect.Descriptor instead.
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{8}
}

func (x *TraceEvent) GetTimeNs() int64 {
	if x != nil {
		return x.TimeNs
	}
	return 0
}

func (x *TraceEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TraceEvent) GetFields() []*TraceEventFieldEntry {
	if x != nil {
		return x.Fields
	}
	return nil
}

type TraceMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The UUIDv7 of the segment
	SegmentId []byte `protobuf:"bytes,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// The name of the source that generated the segment
	SourceName string `protobuf:"bytes,7,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	// Types that are valid to be assigned to Msg:
	//
	//	*TraceMessage_SegmentStart
	//	*TraceMessage_SegmentEnd
	//	*TraceMessage_EventSchema
	//	*TraceMessage_EventFieldNamedValues
	//	*TraceMessage_Event
	Msg           isTraceMessage_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceMessage) Reset() {
	*x = TraceMessage{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceMessage) ProtoMessage() {}

func (x *TraceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceMessage.ProtoReflect.Descriptor instead.
func (*TraceMessage) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{9}
}

func (x *TraceMessage) GetSegmentId() []byte {
	if x != nil {
		return x.SegmentId
	}
	return nil
}

func (x *TraceMessage) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *TraceMessage) GetMsg() isTraceMessage_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TraceMessage) GetSegmentStart() *TraceSegmentStart {
	if x != nil {
		if x, ok := x.Msg.(*TraceMessage_SegmentStart); ok {
			return x.SegmentStart
		}
	}
	return nil
}

func (x *TraceMessage) GetSegmentEnd() *TraceSegmentEnd {
	if x != nil {
		if x, ok := x.Msg.(*TraceMessage_SegmentEnd); ok {
			return x.SegmentEnd
		}
	}
	return nil
}

func (x *TraceMessage) GetEventSchema() *TraceEventSchema {
	if x != nil {
		if x, ok := x.Msg.(*TraceMessage_EventSchema); ok {
			return x.EventSchema
		}
	}
	return nil
}

func (x *TraceMessage) GetEventFieldNamedValues() *TraceEventFieldNamedValues {
	if x != nil {
		if x, ok := x.Msg.(*TraceMessage_EventFieldNamedValues); ok {
			return x.EventFieldNamedValues
		}
	}
	return nil
}

func (x *TraceMessage) GetEvent() *TraceEvent {
	if x != nil {
		if x, ok := x.Msg.(*TraceMessage_Event); ok {
			return x.Event
		}
	}
	return nil
}

type isTraceMessage_Msg interface {
	isTraceMessage_Msg()
}

type TraceMessage_SegmentStart struct {
	SegmentStart *TraceSegmentStart `protobuf:"bytes,2,opt,name=segment_start,json=segmentStart,proto3,oneof"`
}

type TraceMessage_SegmentEnd struct {
	SegmentEnd *TraceSegmentEnd `protobuf:"bytes,3,opt,name=segment_end,json=segmentEnd,proto3,oneof"`
}

type TraceMessage_EventSchema struct {
	EventSchema *TraceEventSchema `protobuf:"bytes,4,opt,name=event_schema,json=eventSchema,proto3,oneof"`
}

type TraceMessage_EventFieldNamedValues struct {
	EventFieldNamedValues *TraceEventFieldNamedValues `protobuf:"bytes,5,opt,name=event_field_named_values,json=eventFieldNamedValues,proto3,oneof"`
}

type TraceMessage_Event struct {
	Event *TraceEvent `protobuf:"bytes,6,opt,name=event,proto3,oneof"`
}

func (*TraceMessage_SegmentStart) isTraceMessage_Msg() {}

func (*TraceMessage_SegmentEnd) isTraceMessage_Msg() {}

func (*TraceMessage_EventSchema) isTraceMessage_Msg() {}

func (*TraceMessage_EventFieldNamedValues) isTraceMessage_Msg() {}

func (*TraceMessage_Event) isTraceMessage_Msg() {}

type TraceMessageBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*TraceMessage        `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TraceMessageBatch) Reset() {
	*x = TraceMessageBatch{}
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TraceMessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceMessageBatch) ProtoMessage() {}

func (x *TraceMessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_trace_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceMessageBatch.ProtoReflect.Descriptor instead.
func (*TraceMessageBatch) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_trace_proto_rawDescGZIP(), []int{10}
}

func (x *TraceMessageBatch) GetMessages() []*TraceMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

var File_zeloscloud_trace_trace_proto protoreflect.FileDescriptor

const file_zeloscloud_trace_trace_proto_rawDesc = "" +
	"\n" +
	"\x1czeloscloud/trace/trace.proto\x12\x10zeloscloud.trace\"\xfb\x02\n" +
	"\x05Value\x12\x14\n" +
	"\x04int8\x18\x01 \x01(\x03H\x00R\x04int8\x12\x16\n" +
	"\x05int16\x18\x02 \x01(\x03H\x00R\x05int16\x12\x16\n" +
	"\x05int32\x18\x03 \x01(\x03H\x00R\x05int32\x12\x16\n" +
	"\x05int64\x18\x04 \x01(\x03H\x00R\x05int64\x12\x16\n" +
	"\x05uint8\x18\x05 \x01(\x04H\x00R\x05uint8\x12\x18\n" +
	"\x06uint16\x18\x06 \x01(\x04H\x00R\x06uint16\x12\x18\n" +
	"\x06uint32\x18\a \x01(\x04H\x00R\x06uint32\x12\x18\n" +
	"\x06uint64\x18\b \x01(\x04H\x00R\x06uint64\x12\x1a\n" +
	"\afloat32\x18\t \x01(\x02H\x00R\afloat32\x12\x1a\n" +
	"\afloat64\x18\n" +
	" \x01(\x01H\x00R\afloat64\x12#\n" +
	"\ftimestamp_ns\x18\v \x01(\x10H\x00R\vtimestampNs\x12\x18\n" +
	"\x06binary\x18\f \x01(\fH\x00R\x06binary\x12\x18\n" +
	"\x06string\x18\r \x01(\tH\x00R\x06string\x12\x14\n" +
	"\x04bool\x18\x0e \x01(\bH\x00R\x04boolB\a\n" +
	"\x05value\"\x88\x01\n" +
	"\x17TraceEventFieldMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\tdata_type\x18\x02 \x01(\x0e2\x1a.zeloscloud.trace.DataTypeR\bdataType\x12\x17\n" +
	"\x04unit\x18\x03 \x01(\tH\x00R\x04unit\x88\x01\x01B\a\n" +
	"\x05_unit\"M\n" +
	"\x11TraceSegmentStart\x12\x17\n" +
	"\atime_ns\x18\x01 \x01(\x10R\x06timeNs\x12\x1f\n" +
	"\vsource_name\x18\x02 \x01(\tR\n" +
	"sourceName\"*\n" +
	"\x0fTraceSegmentEnd\x12\x17\n" +
	"\atime_ns\x18\x01 \x01(\x10R\x06timeNs\"i\n" +
	"\x10TraceEventSchema\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12A\n" +
	"\x06fields\x18\x02 \x03(\v2).zeloscloud.trace.TraceEventFieldMetadataR\x06fields\"d\n" +
	"\x1fTraceEventFieldNamedValuesEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.zeloscloud.trace.ValueR\x05value\"\xa5\x01\n" +
	"\x1aTraceEventFieldNamedValues\x12\x1d\n" +
	"\n" +
	"event_name\x18\x01 \x01(\tR\teventName\x12\x1d\n" +
	"\n" +
	"field_name\x18\x02 \x01(\tR\tfieldName\x12I\n" +
	"\x06values\x18\x03 \x03(\v21.zeloscloud.trace.TraceEventFieldNamedValuesEntryR\x06values\"Y\n" +
	"\x14TraceEventFieldEntry\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12-\n" +
	"\x05value\x18\x02 \x01(\v2\x17.zeloscloud.trace.ValueR\x05value\"y\n" +
	"\n" +
	"TraceEvent\x12\x17\n" +
	"\atime_ns\x18\x01 \x01(\x10R\x06timeNs\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12>\n" +
	"\x06fields\x18\x03 \x03(\v2&.zeloscloud.trace.TraceEventFieldEntryR\x06fields\"\xcf\x03\n" +
	"\fTraceMessage\x12\x1d\n" +
	"\n" +
	"segment_id\x18\x01 \x01(\fR\tsegmentId\x12\x1f\n" +
	"\vsource_name\x18\a \x01(\tR\n" +
	"sourceName\x12J\n" +
	"\rsegment_start\x18\x02 \x01(\v2#.zeloscloud.trace.TraceSegmentStartH\x00R\fsegmentStart\x12D\n" +
	"\vsegment_end\x18\x03 \x01(\v2!.zeloscloud.trace.TraceSegmentEndH\x00R\n" +
	"segmentEnd\x12G\n" +
	"\fevent_schema\x18\x04 \x01(\v2\".zeloscloud.trace.TraceEventSchemaH\x00R\veventSchema\x12g\n" +
	"\x18event_field_named_values\x18\x05 \x01(\v2,.zeloscloud.trace.TraceEventFieldNamedValuesH\x00R\x15eventFieldNamedValues\x124\n" +
	"\x05event\x18\x06 \x01(\v2\x1c.zeloscloud.trace.TraceEventH\x00R\x05eventB\x05\n" +
	"\x03msg\"O\n" +
	"\x11TraceMessageBatch\x12:\n" +
	"\bmessages\x18\x01 \x03(\v2\x1e.zeloscloud.trace.TraceMessageR\bmessages*\xd9\x02\n" +
	"\bDataType\x12\x19\n" +
	"\x15DATA_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eDATA_TYPE_INT8\x10\x01\x12\x13\n" +
	"\x0fDATA_TYPE_INT16\x10\x02\x12\x13\n" +
	"\x0fDATA_TYPE_INT32\x10\x03\x12\x13\n" +
	"\x0fDATA_TYPE_INT64\x10\x04\x12\x13\n" +
	"\x0fDATA_TYPE_UINT8\x10\x05\x12\x14\n" +
	"\x10DATA_TYPE_UINT16\x10\x06\x12\x14\n" +
	"\x10DATA_TYPE_UINT32\x10\a\x12\x14\n" +
	"\x10DATA_TYPE_UINT64\x10\b\x12\x15\n" +
	"\x11DATA_TYPE_FLOAT32\x10\t\x12\x15\n" +
	"\x11DATA_TYPE_FLOAT64\x10\n" +
	"\x12\x1a\n" +
	"\x16DATA_TYPE_TIMESTAMP_NS\x10\v\x12\x14\n" +
	"\x10DATA_TYPE_BINARY\x10\f\x12\x14\n" +
	"\x10DATA_TYPE_STRING\x10\r\x12\x12\n" +
	"\x0eDATA_TYPE_BOOL\x10\x0eb\x06proto3"

var (
	file_zeloscloud_trace_trace_proto_rawDescOnce sync.Once
	file_zeloscloud_trace_trace_proto_rawDescData []byte
)

func file_zeloscloud_trace_trace_proto_rawDescGZIP() []byte {
	file_zeloscloud_trace_trace_proto_rawDescOnce.Do(func() {
		file_zeloscloud_trace_trace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_zeloscloud_trace_trace_proto_rawDesc), len(file_zeloscloud_trace_trace_proto_rawDesc)))
	})
	return file_zeloscloud_trace_trace_proto_rawDescData
}

var file_zeloscloud_trace_trace_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_zeloscloud_trace_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_zeloscloud_trace_trace_proto_goTypes = []any{
	(DataType)(0),                           // 0: zeloscloud.trace.DataType
	(*Value)(nil),                           // 1: zeloscloud.trace.Value
	(*TraceEventFieldMetadata)(nil),         // 2: zeloscloud.trace.TraceEventFieldMetadata
	(*TraceSegmentStart)(nil),               // 3: zeloscloud.trace.TraceSegmentStart
	(*TraceSegmentEnd)(nil),                 // 4: zeloscloud.trace.TraceSegmentEnd
	(*TraceEventSchema)(nil),                // 5: zeloscloud.trace.TraceEventSchema
	(*TraceEventFieldNamedValuesEntry)(nil), // 6: zeloscloud.trace.TraceEventFieldNamedValuesEntry
	(*TraceEventFieldNamedValues)(nil),      // 7: zeloscloud.trace.TraceEventFieldNamedValues
	(*TraceEventFieldEntry)(nil),            // 8: zeloscloud.trace.TraceEventFieldEntry
	(*TraceEvent)(nil),                      // 9: zeloscloud.trace.TraceEvent
	(*TraceMessage)(nil),                    // 10: zeloscloud.trace.TraceMessage
	(*TraceMessageBatch)(nil),               // 11: zeloscloud.trace.TraceMessageBatch
}
var file_zeloscloud_trace_trace_proto_depIdxs = []int32{
	0,  // 0: zeloscloud.trace.TraceEventFieldMetadata.data_type:type_name -> zeloscloud.trace.DataType
	2,  // 1: zeloscloud.trace.TraceEventSchema.fields:type_name -> zeloscloud.trace.TraceEventFieldMetadata
	1,  // 2: zeloscloud.trace.TraceEventFieldNamedValuesEntry.value:type_name -> zeloscloud.trace.Value
	6,  // 3: zeloscloud.trace.TraceEventFieldNamedValues.values:type_name -> zeloscloud.trace.TraceEventFieldNamedValuesEntry
	1,  // 4: zeloscloud.trace.TraceEventFieldEntry.value:type_name -> zeloscloud.trace.Value
	8,  // 5: zeloscloud.trace.TraceEvent.fields:type_name -> zeloscloud.trace.TraceEventFieldEntry
	3,  // 6: zeloscloud.trace.TraceMessage.segment_start:type_name -> zeloscloud.trace.TraceSegmentStart
	4,  // 7: zeloscloud.trace.TraceMessage.segment_end:type_name -> zeloscloud.trace.TraceSegmentEnd
	5,  // 8: zeloscloud.trace.TraceMessage.event_schema:type_name -> zeloscloud.trace.TraceEventSchema
	7,  // 9: zeloscloud.trace.TraceMessage.event_field_named_values:type_name -> zeloscloud.trace.TraceEventFieldNamedValues
	9,  // 10: zeloscloud.trace.TraceMessage.event:type_name -> zeloscloud.trace.TraceEvent
	10, // 11: zeloscloud.trace.TraceMessageBatch.messages:type_name -> zeloscloud.trace.TraceMessage
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_zeloscloud_trace_trace_proto_init() }
func file_zeloscloud_trace_trace_proto_init() {
	if File_zeloscloud_trace_trace_proto != nil {
		return
	}
	file_zeloscloud_trace_trace_proto_msgTypes[0].OneofWrappers = []any{
		(*Value_Int8)(nil),
		(*Value_Int16)(nil),
		(*Value_Int32)(nil),
		(*Value_Int64)(nil),
		(*Value_Uint8)(nil),
		(*Value_Uint16)(nil),
		(*Value_Uint32)(nil),
		(*Value_Uint64)(nil),
		(*Value_Float32)(nil),
		(*Value_Float64)(nil),
		(*Value_TimestampNs)(nil),
		(*Value_Binary)(nil),
		(*Value_String_)(nil),
		(*Value_Bool)(nil),
	}
	file_zeloscloud_trace_trace_proto_msgTypes[1].OneofWrappers = []any{}
	file_zeloscloud_trace_trace_proto_msgTypes[9].OneofWrappers = []any{
		(*TraceMessage_SegmentStart)(nil),
		(*TraceMessage_SegmentEnd)(nil),
		(*TraceMessage_EventSchema)(nil),
		(*TraceMessage_EventFieldNamedValues)(nil),
		(*TraceMessage_Event)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_zeloscloud_trace_trace_proto_rawDesc), len(file_zeloscloud_trace_trace_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_zeloscloud_trace_trace_proto_goTypes,
		DependencyIndexes: file_zeloscloud_trace_trace_proto_depIdxs,
		EnumInfos:         file_zeloscloud_trace_trace_proto_enumTypes,
		MessageInfos:      file_zeloscloud_trace_trace_proto_msgTypes,
	}.Build()
	File_zeloscloud_trace_trace_proto = out.File
	file_zeloscloud_trace_trace_proto_goTypes = nil
	file_zeloscloud_trace_trace_proto_depIdxs = nil
}
