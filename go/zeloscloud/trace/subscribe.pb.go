// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.0
// source: zeloscloud/trace/subscribe.proto

package trace

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubscribeCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *string                `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	StartTime     *int64                 `protobuf:"fixed64,2,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeCommand) Reset() {
	*x = SubscribeCommand{}
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeCommand) ProtoMessage() {}

func (x *SubscribeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeCommand.ProtoReflect.Descriptor instead.
func (*SubscribeCommand) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_subscribe_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeCommand) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

func (x *SubscribeCommand) GetStartTime() int64 {
	if x != nil && x.StartTime != nil {
		return *x.StartTime
	}
	return 0
}

type UnsubscribeCommand struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *string                `protobuf:"bytes,1,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnsubscribeCommand) Reset() {
	*x = UnsubscribeCommand{}
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnsubscribeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribeCommand) ProtoMessage() {}

func (x *UnsubscribeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribeCommand.ProtoReflect.Descriptor instead.
func (*UnsubscribeCommand) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_subscribe_proto_rawDescGZIP(), []int{1}
}

func (x *UnsubscribeCommand) GetFilter() string {
	if x != nil && x.Filter != nil {
		return *x.Filter
	}
	return ""
}

type SubscribeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Cmd:
	//
	//	*SubscribeRequest_Subscribe
	//	*SubscribeRequest_Unsubscribe
	Cmd           isSubscribeRequest_Cmd `protobuf_oneof:"cmd"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_subscribe_proto_rawDescGZIP(), []int{2}
}

func (x *SubscribeRequest) GetCmd() isSubscribeRequest_Cmd {
	if x != nil {
		return x.Cmd
	}
	return nil
}

func (x *SubscribeRequest) GetSubscribe() *SubscribeCommand {
	if x != nil {
		if x, ok := x.Cmd.(*SubscribeRequest_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *SubscribeRequest) GetUnsubscribe() *UnsubscribeCommand {
	if x != nil {
		if x, ok := x.Cmd.(*SubscribeRequest_Unsubscribe); ok {
			return x.Unsubscribe
		}
	}
	return nil
}

type isSubscribeRequest_Cmd interface {
	isSubscribeRequest_Cmd()
}

type SubscribeRequest_Subscribe struct {
	Subscribe *SubscribeCommand `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type SubscribeRequest_Unsubscribe struct {
	Unsubscribe *UnsubscribeCommand `protobuf:"bytes,2,opt,name=unsubscribe,proto3,oneof"`
}

func (*SubscribeRequest_Subscribe) isSubscribeRequest_Cmd() {}

func (*SubscribeRequest_Unsubscribe) isSubscribeRequest_Cmd() {}

type SubscribeResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Msg:
	//
	//	*SubscribeResponse_TraceMessageBatch
	Msg           isSubscribeResponse_Msg `protobuf_oneof:"msg"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_zeloscloud_trace_subscribe_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_zeloscloud_trace_subscribe_proto_rawDescGZIP(), []int{3}
}

func (x *SubscribeResponse) GetMsg() isSubscribeResponse_Msg {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *SubscribeResponse) GetTraceMessageBatch() *TraceMessageBatch {
	if x != nil {
		if x, ok := x.Msg.(*SubscribeResponse_TraceMessageBatch); ok {
			return x.TraceMessageBatch
		}
	}
	return nil
}

type isSubscribeResponse_Msg interface {
	isSubscribeResponse_Msg()
}

type SubscribeResponse_TraceMessageBatch struct {
	TraceMessageBatch *TraceMessageBatch `protobuf:"bytes,1,opt,name=trace_message_batch,json=traceMessageBatch,proto3,oneof"`
}

func (*SubscribeResponse_TraceMessageBatch) isSubscribeResponse_Msg() {}

var File_zeloscloud_trace_subscribe_proto protoreflect.FileDescriptor

const file_zeloscloud_trace_subscribe_proto_rawDesc = "" +
	"\n" +
	" zeloscloud/trace/subscribe.proto\x12\x10zeloscloud.trace\x1a\x1czeloscloud/trace/trace.proto\"m\n" +
	"\x10SubscribeCommand\x12\x1b\n" +
	"\x06filter\x18\x01 \x01(\tH\x00R\x06filter\x88\x01\x01\x12\"\n" +
	"\n" +
	"start_time\x18\x02 \x01(\x10H\x01R\tstartTime\x88\x01\x01B\t\n" +
	"\a_filterB\r\n" +
	"\v_start_time\"<\n" +
	"\x12UnsubscribeCommand\x12\x1b\n" +
	"\x06filter\x18\x01 \x01(\tH\x00R\x06filter\x88\x01\x01B\t\n" +
	"\a_filter\"\xa7\x01\n" +
	"\x10SubscribeRequest\x12B\n" +
	"\tsubscribe\x18\x01 \x01(\v2\".zeloscloud.trace.SubscribeCommandH\x00R\tsubscribe\x12H\n" +
	"\vunsubscribe\x18\x02 \x01(\v2$.zeloscloud.trace.UnsubscribeCommandH\x00R\vunsubscribeB\x05\n" +
	"\x03cmd\"q\n" +
	"\x11SubscribeResponse\x12U\n" +
	"\x13trace_message_batch\x18\x01 \x01(\v2#.zeloscloud.trace.TraceMessageBatchH\x00R\x11traceMessageBatchB\x05\n" +
	"\x03msg2j\n" +
	"\x0eTraceSubscribe\x12X\n" +
	"\tSubscribe\x12\".zeloscloud.trace.SubscribeRequest\x1a#.zeloscloud.trace.SubscribeResponse(\x010\x01b\x06proto3"

var (
	file_zeloscloud_trace_subscribe_proto_rawDescOnce sync.Once
	file_zeloscloud_trace_subscribe_proto_rawDescData []byte
)

func file_zeloscloud_trace_subscribe_proto_rawDescGZIP() []byte {
	file_zeloscloud_trace_subscribe_proto_rawDescOnce.Do(func() {
		file_zeloscloud_trace_subscribe_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_zeloscloud_trace_subscribe_proto_rawDesc), len(file_zeloscloud_trace_subscribe_proto_rawDesc)))
	})
	return file_zeloscloud_trace_subscribe_proto_rawDescData
}

var file_zeloscloud_trace_subscribe_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_zeloscloud_trace_subscribe_proto_goTypes = []any{
	(*SubscribeCommand)(nil),   // 0: zeloscloud.trace.SubscribeCommand
	(*UnsubscribeCommand)(nil), // 1: zeloscloud.trace.UnsubscribeCommand
	(*SubscribeRequest)(nil),   // 2: zeloscloud.trace.SubscribeRequest
	(*SubscribeResponse)(nil),  // 3: zeloscloud.trace.SubscribeResponse
	(*TraceMessageBatch)(nil),  // 4: zeloscloud.trace.TraceMessageBatch
}
var file_zeloscloud_trace_subscribe_proto_depIdxs = []int32{
	0, // 0: zeloscloud.trace.SubscribeRequest.subscribe:type_name -> zeloscloud.trace.SubscribeCommand
	1, // 1: zeloscloud.trace.SubscribeRequest.unsubscribe:type_name -> zeloscloud.trace.UnsubscribeCommand
	4, // 2: zeloscloud.trace.SubscribeResponse.trace_message_batch:type_name -> zeloscloud.trace.TraceMessageBatch
	2, // 3: zeloscloud.trace.TraceSubscribe.Subscribe:input_type -> zeloscloud.trace.SubscribeRequest
	3, // 4: zeloscloud.trace.TraceSubscribe.Subscribe:output_type -> zeloscloud.trace.SubscribeResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_zeloscloud_trace_subscribe_proto_init() }
func file_zeloscloud_trace_subscribe_proto_init() {
	if File_zeloscloud_trace_subscribe_proto != nil {
		return
	}
	file_zeloscloud_trace_trace_proto_init()
	file_zeloscloud_trace_subscribe_proto_msgTypes[0].OneofWrappers = []any{}
	file_zeloscloud_trace_subscribe_proto_msgTypes[1].OneofWrappers = []any{}
	file_zeloscloud_trace_subscribe_proto_msgTypes[2].OneofWrappers = []any{
		(*SubscribeRequest_Subscribe)(nil),
		(*SubscribeRequest_Unsubscribe)(nil),
	}
	file_zeloscloud_trace_subscribe_proto_msgTypes[3].OneofWrappers = []any{
		(*SubscribeResponse_TraceMessageBatch)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_zeloscloud_trace_subscribe_proto_rawDesc), len(file_zeloscloud_trace_subscribe_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zeloscloud_trace_subscribe_proto_goTypes,
		DependencyIndexes: file_zeloscloud_trace_subscribe_proto_depIdxs,
		MessageInfos:      file_zeloscloud_trace_subscribe_proto_msgTypes,
	}.Build()
	File_zeloscloud_trace_subscribe_proto = out.File
	file_zeloscloud_trace_subscribe_proto_goTypes = nil
	file_zeloscloud_trace_subscribe_proto_depIdxs = nil
}
